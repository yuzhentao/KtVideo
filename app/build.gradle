plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
}

static def getCurrentTime() {
    return new Date().format("yyyy-MM-dd")
}

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    defaultConfig {
        applicationId rootProject.ext.android["applicationId"]
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.name == "debug") {
                output.outputFileName = "KtVideo_${android.defaultConfig.versionName}_debug_${getCurrentTime()}.apk"
            } else if (variant.buildType.name == "release") {
                output.outputFileName = "KtVideo_${android.defaultConfig.versionName}_release_${getCurrentTime()}.apk"
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        viewBinding true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    ndkVersion '23.1.7779620'
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    kapt rootProject.ext.otherDependencies["glide_compiler"]
    kapt rootProject.ext.otherDependencies["aria_compiler"]
    kapt rootProject.ext.otherDependencies["arouter_compiler"]
    implementation project(':common')
    if (!isNeedHome.toBoolean()) {
        implementation project(':home')
    }
    if (!isNeedDiscover.toBoolean()) {
        implementation project(':discover')
    }
    if (!isNeedRanking.toBoolean()) {
        implementation project(':ranking')
    }
    if (!isNeedMine.toBoolean()) {
        implementation project(':mine')
    }
}